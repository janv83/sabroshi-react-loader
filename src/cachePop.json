{"jig://15381533a03454b9940064ae465010e4ac5dcc7c1539f712c0a55225e3e5fd49_o1":{"kind":"code","props":{"deps":{"Jig":{"$jig":"native://Jig"},"Sabroshi":{"$jig":"_o2"},"expect":{"$jig":"71fba386341b932380ec5bfedc3a40bce43d4974decdc94c419a94a8ce5dfc23_o1"}},"location":"_o1","nonce":1,"origin":"_o1","owner":"18VYxvRrcdMAjsKbhiTuQyCd1ozSiLnN4e","satoshis":0},"src":"class SabroshiAvatar extends Jig {\r\n    init(id, owner, name, mySabroshi) {\r\n\r\n        if(!Number.isInteger(id))\r\n          throw new Error('Invalid id');\r\n        if((typeof owner) !== \"string\")\r\n          throw new Error(\"invalid owner type\");\r\n        if((typeof name) !== \"string\")\r\n          throw new Error(\"invalid name type\");\r\n   \r\n        expect(mySabroshi).toBeInstanceOf(Sabroshi);\r\n\r\n        this.sender = caller && caller.owner ? caller.owner:null;\r\n\r\n        if(mySabroshi.owner !== owner)\r\n            throw new Error(\"you don't own this sabroshi\");\r\n\r\n        this.id = id;\r\n        this.owner = owner;\r\n        this.name = name;\r\n        this.activeSabroshi = mySabroshi;\r\n        this.metadata = {name:this.name, symbol: \"AVA\", author: this.owner, image:this.activeSabroshi.metadata.image}; //do a placeholder image instead here\r\n\r\n    }\r\n\r\n    send(to)\r\n    {\r\n      this.sender = this.owner;\r\n      this.owner = to;\r\n    }\r\n\r\n    changeName(name)\r\n    {\r\n      if((typeof name) !== \"string\")\r\n      throw new Error(\"invalid name type\");\r\n      this.name = name;\r\n      this.metadata.name = this.name;\r\n    }\r\n\r\n    changeSabroshi(newSabroshi)\r\n    {\r\n        expect(newSabroshi).toBeInstanceOf(Sabroshi);   \r\n        this.activeSabroshi = newSabroshi;\r\n        this.metadata.image = this.activeSabroshi.metadata.image; //remove when avatar imag is placeholder imag\r\n    }\r\n    static addFriend(friend)\r\n    {\r\n        if(!this.friends)\r\n        {\r\n            this.friends = [];\r\n        }\r\n        \r\n        \r\n        this.friends.push(friend);\r\n        \r\n    }\r\n    static setFriends(friends)\r\n    {\r\n        this.friends = friends;\r\n    }\r\n}","version":"04"},"jig://15381533a03454b9940064ae465010e4ac5dcc7c1539f712c0a55225e3e5fd49_o2":{"kind":"code","props":{"deps":{"B":{"$jig":"05f67252e696160a7c0099ae8d1ec23c39592378773b3a5a55f16bd1286e7dcb_o3"},"Jig":{"$jig":"native://Jig"},"expect":{"$jig":"71fba386341b932380ec5bfedc3a40bce43d4974decdc94c419a94a8ce5dfc23_o1"}},"friends":[{"$jig":"d6170025a62248d8df6dc14e3806e68b8df3d804c800c7bfb23b0b4232862505_o1"},{"$jig":"_o1"}],"interactive":false,"location":"_o2","nonce":1,"origin":"_o2","owner":"18VYxvRrcdMAjsKbhiTuQyCd1ozSiLnN4e","satoshis":0},"src":"class Sabroshi extends Jig {\r\n    init(id, owner, description,series, attributeMap, rareness, image) {\r\n      /* const minting = caller.owner === \"18VYxvRrcdMAjsKbhiTuQyCd1ozSiLnN4e\";\r\n        if(!minting) throw new Error('Can only be created by the owner');*/\r\n\r\n        const minting = caller === this.constructor;\r\n        if(!minting) throw new Error('Must create NFT using mint()');\r\n        if(!Number.isInteger(id))\r\n          throw new Error('Invalid id');\r\n        if((typeof owner) !== \"string\")\r\n          throw new Error(\"invalid owner type\");\r\n        if((typeof description) !== \"string\")\r\n          throw new Error(\"invalid description type\");\r\n        if(!Number.isInteger(series))\r\n          throw new Error('Invalid series');\r\n        \r\n\r\n        expect(image).toBeInstanceOf(B);\r\n\r\n        this.sender = caller && caller.owner ? caller.owner:null;\r\n\r\n        this.id = id;\r\n        this.owner = owner;\r\n        this.series = series;\r\n        this.description = description;\r\n        this.rareness = rareness;\r\n        this.attributeMap = attributeMap;\r\n        this.metadata = {name:description, symbol: \"BRO\", author: this.owner, image:image};\r\n    }\r\n\r\n\r\n    send(to)\r\n    {\r\n      this.sender = this.owner;\r\n      this.owner = to;\r\n    }\r\n\r\n    static addFriend(friend)\r\n    {\r\n        if(!this.friends)\r\n        {\r\n            this.friends = [];\r\n        }\r\n        \r\n        \r\n        this.friends.push(friend);\r\n        \r\n    }\r\n\r\n    static setFriends(friends)\r\n    {\r\n        this.friends = friends;\r\n    }\r\n\r\n    static mint(id, owner, description,series, attributeMap, rareness, image)\r\n    {\r\n        return new this(id, owner, description,series, attributeMap, rareness, image);\r\n    }\r\n}","version":"04"},"jig://05f67252e696160a7c0099ae8d1ec23c39592378773b3a5a55f16bd1286e7dcb_o3":{"kind":"code","props":{"deps":{"Berry":{"$jig":"native://Berry"},"txo":{"$jig":"_o2"}},"location":"_o3","metadata":{"author":"Run â–¸ Extra","license":"MIT","website":"https://www.run.network"},"nonce":2,"origin":"5332c013476cd2a2c18710a01188695bc27a5ef1748a51d4a5910feb1111dab4_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"class B extends Berry {\n  init (base64Data, mediaType, encoding, filename, metadata = {}) {\n    this.base64Data = base64Data\n    this.mediaType = mediaType\n    this.encoding = encoding\n    this.filename = filename\n    this.metadata = metadata\n\n    if (mediaType === 'image/svg+xml' || mediaType === 'image/png') {\n      this.metadata.image = this\n    }\n  }\n\n  static async pluck (path, fetch) {\n    const txid = path.length === 64 ? path : JSON.parse(path).txid\n    const metadata = path.length === 64 ? {} : JSON.parse(path).metadata\n    const data = txo(await fetch(txid))\n    const out = data.out.find(o => o.s2 === '19HxigV4QyBv3tHpQVcUEQyq1pzZVdoAut')\n    if (!out) throw new Error(`Cannot find B:// data in ${txid}`)\n    return new B(out.b3, out.s4, out.s5, out.s6, metadata)\n  }\n\n  static async loadWithMetadata (txid, metadata) {\n    return this.load(JSON.stringify({ txid, metadata }))\n  }\n}","version":"04"},"jig://05f67252e696160a7c0099ae8d1ec23c39592378773b3a5a55f16bd1286e7dcb_o2":{"kind":"code","props":{"deps":{"Hex":{"$jig":"727e7b423b7ee40c0b5be87fba7fa5673ea2d20a74259040a7295d9c32a90011_o1"},"Tx":{"$jig":"_o1"}},"location":"_o2","nonce":2,"origin":"312985bd960ae4c59856b3089b04017ede66506ea181333eec7c9bb88b11c490_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"function txo (rawtx) {\n  const ret = { }\n\n  function chunks (script) {\n    const b = Hex.stringToBytes(script)\n    let i = 0\n\n    function u8 () { return b[i++] }\n    function u16 () { return u8() + u8() * 256 }\n    function u32 () { return u16() + u16() * 256 * 256 }\n    function buf (n) { const h = Hex.bytesToString(b.slice(i, i + n)); i += n; return h }\n\n    const OP_PUSHDATA1 = 0x4c\n    const OP_PUSHDATA2 = 0x4d\n    const OP_PUSHDATA4 = 0x4e\n\n    const chunks = []\n    while (i < b.length) {\n      const opcodenum = u8()\n      if (opcodenum > 0 && opcodenum < OP_PUSHDATA1) {\n        chunks.push({ buf: buf(opcodenum), len: opcodenum, opcodenum })\n      } else if (opcodenum === OP_PUSHDATA1) {\n        const len = u8()\n        chunks.push({ buf: buf(len), len, opcodenum })\n      } else if (opcodenum === OP_PUSHDATA2) {\n        const len = u16()\n        chunks.push({ buf: buf(len), len, opcodenum })\n      } else if (opcodenum === OP_PUSHDATA4) {\n        const len = u32()\n        chunks.push({ buf: buf(len), len, opcodenum })\n      } else {\n        chunks.push({ opcodenum })\n      }\n    }\n    return chunks\n  }\n\n  // https://stackoverflow.com/questions/23190056/hex-to-base64-converter-for-javascript\n  function bytesToBase64 (arr) {\n    const abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' // base64 alphabet\n    const bin = n => n.toString(2).padStart(8, 0) // convert num to 8-bit binary string\n    const l = arr.length\n    let result = ''\n    for (let i = 0; i <= (l - 1) / 3; i++) {\n      const c1 = i * 3 + 1 >= l // case when \"=\" is on end\n      const c2 = i * 3 + 2 >= l // case when \"=\" is on end\n      const chunk = bin(arr[3 * i]) + bin(c1 ? 0 : arr[3 * i + 1]) + bin(c2 ? 0 : arr[3 * i + 2])\n      const r = chunk.match(/.{1,6}/g).map((x, j) => j === 3 && c2 ? '=' : (j === 2 && c1 ? '=' : abc[+('0b' + x)]))\n      result += r.join('')\n    }\n    return result\n  }\n\n  function xput (script, output) {\n    const ret = { }\n    chunks(script).forEach((c, n) => {\n      if (c.buf) {\n        ret['b' + n] = bytesToBase64(Hex.stringToBytes(c.buf))\n        const enc = c.buf.replace(/[0-9a-f]{2}/g, '%$&')\n        if (output) try { ret['s' + n] = decodeURIComponent(enc) } catch (e) { }\n        if (output) ret['h' + n] = c.buf\n      } else {\n        ret['b' + n] = { op: c.opcodenum }\n      }\n    })\n    return ret\n  }\n\n  function input (txin, i) {\n    const ret = xput(txin.script)\n    ret.e = { h: txin.prevTxId, i: txin.outputIndex }\n    ret.i = i\n    ret.seq = txin.sequenceNumber\n    return ret\n  }\n\n  function output (txout, i) {\n    const ret = xput(txout.script, true)\n    ret.e = { v: txout.satoshis, i }\n    ret.i = i\n    return ret\n  }\n\n  const tx = new Tx(rawtx)\n  ret.in = tx.inputs.map(input)\n  ret.out = tx.outputs.map(output)\n  ret.lock = tx.nLockTime\n  return ret\n}","version":"04"},"jig://727e7b423b7ee40c0b5be87fba7fa5673ea2d20a74259040a7295d9c32a90011_o1":{"kind":"code","props":{"deps":{},"location":"_o1","nonce":1,"origin":"_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"class Hex {\n  static stringToBytes (s) {\n    if (typeof s !== 'string' || s.length % 2 !== 0) {\n      throw new Error(`Bad hex: ${s}`)\n    }\n\n    s = s.toLowerCase()\n\n    const HEX_CHARS = '0123456789abcdef'.split('')\n    const bytes = []\n\n    for (let i = 0; i < s.length; i += 2) {\n      const high = HEX_CHARS.indexOf(s[i])\n      const low = HEX_CHARS.indexOf(s[i + 1])\n\n      if (high === -1 || low === -1) {\n        throw new Error(`Bad hex: ${s}`)\n      }\n\n      bytes.push(high * 16 + low)\n    }\n\n    return bytes\n  }\n\n  static bytesToString (b) {\n    if (!Array.isArray(b)) throw new Error(`Bad bytes: ${b}`)\n\n    const validDigit = x => Number.isInteger(x) && x >= 0 && x < 256\n    b.forEach(x => { if (!validDigit(x)) throw new Error(`Bad digit: ${x}`) })\n\n    return b\n      .map(x => x.toString('16'))\n      .map(x => x.length === 1 ? '0' + x : x)\n      .join('')\n  }\n}","version":"04"},"tx://727e7b423b7ee40c0b5be87fba7fa5673ea2d20a74259040a7295d9c32a90011":"010000000165c8237c6437654f7be09fa2c1456bef82d12b83d74f401017c7005c6f692a5a030000006b483045022100ee54efd4488174b6da751ea8e84704fca65964769f9b9811c373f5d350e07432022074cab89a54576e047f09dc9ac36ecf61368cde2739edecf4c397e9c25fc4862a412102e61c5fd8bd70f2db264c420ca565440da3b992da022960da5f17e86aab466b02ffffffff030000000000000000fd7104006a0372756e01050d52756e20e296b82045787472614d58047b22696e223a302c22726566223a5b5d2c226f7574223a5b2231353934366230643437356534316363373637336637343666363235343361306636363637323234383761663936643138306631646131366536313337636166225d2c2264656c223a5b5d2c22637265223a5b22315079747269596f6b4b4e3347704b7738344c34767672474277557654597a437078225d2c2265786563223a5b7b226f70223a224445504c4f59222c2264617461223a5b22636c61737320486578207b5c6e202073746174696320737472696e67546f427974657320287329207b5c6e2020202069662028747970656f66207320213d3d2027737472696e6727207c7c20732e6c656e6774682025203220213d3d203029207b5c6e2020202020207468726f77206e6577204572726f722860426164206865783a20247b737d60295c6e202020207d5c6e5c6e2020202073203d20732e746f4c6f7765724361736528295c6e5c6e20202020636f6e7374204845585f4348415253203d202730313233343536373839616263646566272e73706c6974282727295c6e20202020636f6e7374206279746573203d205b5d5c6e5c6e20202020666f7220286c65742069203d20303b2069203c20732e6c656e6774683b2069202b3d203229207b5c6e202020202020636f6e73742068696768203d204845585f43484152532e696e6465784f6628735b695d295c6e202020202020636f6e7374206c6f77203d204845585f43484152532e696e6465784f6628735b69202b20315d295c6e5c6e2020202020206966202868696768203d3d3d202d31207c7c206c6f77203d3d3d202d3129207b5c6e20202020202020207468726f77206e6577204572726f722860426164206865783a20247b737d60295c6e2020202020207d5c6e5c6e20202020202062797465732e707573682868696768202a203136202b206c6f77295c6e202020207d5c6e5c6e2020202072657475726e2062797465735c6e20207d5c6e5c6e2020737461746963206279746573546f537472696e6720286229207b5c6e20202020696620282141727261792e6973417272617928622929207468726f77206e6577204572726f7228604261642062797465733a20247b627d60295c6e5c6e20202020636f6e73742076616c69644469676974203d2078203d3e204e756d6265722e6973496e74656765722878292026262078203e3d20302026262078203c203235365c6e20202020622e666f72456163682878203d3e207b20696620282176616c6964446967697428782929207468726f77206e6577204572726f7228604261642064696769743a20247b787d6029207d295c6e5c6e2020202072657475726e20625c6e2020202020202e6d61702878203d3e20782e746f537472696e67282731362729295c6e2020202020202e6d61702878203d3e20782e6c656e677468203d3d3d2031203f20273027202b2078203a2078295c6e2020202020202e6a6f696e282727295c6e20207d5c6e7d222c7b2264657073223a7b7d7d5d7d5d7d22020000000000001976a914fc15596b750b65e16c5650081b2a086da7cf85a688ac56f10000000000001976a91403c5595cc7846471dc6cf3b89d340de3c8137f3a88ac00000000","jig://05f67252e696160a7c0099ae8d1ec23c39592378773b3a5a55f16bd1286e7dcb_o1":{"kind":"code","props":{"deps":{"Hex":{"$jig":"727e7b423b7ee40c0b5be87fba7fa5673ea2d20a74259040a7295d9c32a90011_o1"}},"location":"_o1","nonce":2,"origin":"312985bd960ae4c59856b3089b04017ede66506ea181333eec7c9bb88b11c490_o2","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"class Tx {\n  constructor (rawtx) {\n    const b = Hex.stringToBytes(rawtx)\n    let i = 0\n\n    function u8 () { return b[i++] }\n    function u16 () { return u8() + u8() * 256 }\n    function u32 () { return u16() + u16() * 256 * 256 }\n    function u64 () { return u32() + u32() * 256 * 256 * 256 * 256 }\n    function varint () { const b0 = u8(); return b0 === 0xff ? u64() : b0 === 0xfe ? u32() : b0 === 0xfd ? u16() : b0 }\n    function txid () { const h = Hex.bytesToString(b.slice(i, i + 32).reverse()); i += 32; return h }\n    function script () { const n = varint(); const h = Hex.bytesToString(b.slice(i, i + n)); i += n; return h }\n\n    this.version = u32()\n\n    const nin = varint()\n    this.inputs = []\n    for (let vin = 0; vin < nin; vin++) {\n      this.inputs.push({\n        prevTxId: txid(),\n        outputIndex: u32(),\n        script: script(),\n        sequenceNumber: u32()\n      })\n    }\n\n    const nout = varint()\n    this.outputs = []\n    for (let vout = 0; vout < nout; vout++) {\n      this.outputs.push({\n        satoshis: u64(),\n        script: script()\n      })\n    }\n\n    this.nLockTime = u32()\n  }\n}","version":"04"},"tx://05f67252e696160a7c0099ae8d1ec23c39592378773b3a5a55f16bd1286e7dcb":"010000000490c4118bb89b7cec3e3381a16e5066de7e01049b08b35698c5e40a96bd852931020000006a473044022048d85571f88007a840a721d4cb4b637c24a9cf9304dfc8a656020d36530c22d902203dedbcdcdb7b50a79712b6b73fdb0831fdf34eb450f74ceb84ef3e6cccf00ad74121035ac05f27725ccd234eee649a2e4023284c654bab28b653f5d88520ff05c349ebffffffff90c4118bb89b7cec3e3381a16e5066de7e01049b08b35698c5e40a96bd852931010000006a4730440220239106fb270fd12417100f9548d264cbe019d648cee51d7be306ed77f5e7a682022014bb76cbef36ec586c1229e6b400ed7984bf59ac6edc0acafbab2bd42dc06a5d4121035ac05f27725ccd234eee649a2e4023284c654bab28b653f5d88520ff05c349ebffffffffb4da1111eb0f91a5d4518a74f15e7ac25b698811a01087c1a2d26c4713c03253010000006b483045022100bb154653503cde4b1b2eb50df0e014189cca98800be872f823d99561d6bbab8402206b326a57163f733d993bc95c548c7a5c4b87731f6244a5ef3ccb3be4b9227ee34121035ac05f27725ccd234eee649a2e4023284c654bab28b653f5d88520ff05c349ebffffffff8f15bb931000b4122313401f3679044e9c14ed3eb0355483410f4cd37fe14c28020000006b483045022100e131d2f81128f3b16d0bb2f680b8354de3aa3dde38858cce9d80f9f776561e3202200583deee0c36476e95e5ee20830e49e4c79181a80b89b2f6f625e5ebdad97bf2412102e61c5fd8bd70f2db264c420ca565440da3b992da022960da5f17e86aab466b02ffffffff050000000000000000fd7b06006a0372756e01050d52756e20e296b82045787472614d62067b22696e223a332c22726566223a5b22373237653762343233623765653430633062356265383766626137666135363733656132643230613734323539303430613732393564396333326139303031315f6f31225d2c226f7574223a5b2263376564366266353664383831616337383534653863613361633964643730336533323339303032366365343462656339333465366435383835643766363438222c2230323731303231613365303737663233316131663666373665616234303566643532633864396230356533313735613461636439313265343861646536373936222c2232333466613766663530646262396166363337353466393766613532366138653239666332656336363737346136653037376337626166353161666537303564225d2c2264656c223a5b5d2c22637265223a5b5d2c2265786563223a5b7b226f70223a2255504752414445222c2264617461223a5b7b22246a6967223a307d2c22636c617373205478207b5c6e2020636f6e7374727563746f722028726177747829207b5c6e20202020636f6e73742062203d204865782e737472696e67546f4279746573287261777478295c6e202020206c65742069203d20305c6e5c6e2020202066756e6374696f6e207538202829207b2072657475726e20625b692b2b5d207d5c6e2020202066756e6374696f6e20753136202829207b2072657475726e2075382829202b2075382829202a20323536207d5c6e2020202066756e6374696f6e20753332202829207b2072657475726e207531362829202b207531362829202a20323536202a20323536207d5c6e2020202066756e6374696f6e20753634202829207b2072657475726e207533322829202b207533322829202a20323536202a20323536202a20323536202a20323536207d5c6e2020202066756e6374696f6e20766172696e74202829207b20636f6e7374206230203d20753828293b2072657475726e206230203d3d3d2030786666203f207536342829203a206230203d3d3d2030786665203f207533322829203a206230203d3d3d2030786664203f207531362829203a206230207d5c6e2020202066756e6374696f6e2074786964202829207b20636f6e73742068203d204865782e6279746573546f537472696e6728622e736c69636528692c2069202b203332292e726576657273652829293b2069202b3d2033323b2072657475726e2068207d5c6e2020202066756e6374696f6e20736372697074202829207b20636f6e7374206e203d20766172696e7428293b20636f6e73742068203d204865782e6279746573546f537472696e6728622e736c69636528692c2069202b206e29293b2069202b3d206e3b2072657475726e2068207d5c6e5c6e20202020746869732e76657273696f6e203d2075333228295c6e5c6e20202020636f6e7374206e696e203d20766172696e7428295c6e20202020746869732e696e70757473203d205b5d5c6e20202020666f7220286c65742076696e203d20303b2076696e203c206e696e3b2076696e2b2b29207b5c6e202020202020746869732e696e707574732e70757368287b5c6e202020202020202070726576547849643a207478696428292c5c6e20202020202020206f7574707574496e6465783a2075333228292c5c6e20202020202020207363726970743a2073637269707428292c5c6e202020202020202073657175656e63654e756d6265723a2075333228295c6e2020202020207d295c6e202020207d5c6e5c6e20202020636f6e7374206e6f7574203d20766172696e7428295c6e20202020746869732e6f757470757473203d205b5d5c6e20202020666f7220286c657420766f7574203d20303b20766f7574203c206e6f75743b20766f75742b2b29207b5c6e202020202020746869732e6f7574707574732e70757368287b5c6e20202020202020207361746f736869733a2075363428292c5c6e20202020202020207363726970743a2073637269707428295c6e2020202020207d295c6e202020207d5c6e5c6e20202020746869732e6e4c6f636b54696d65203d2075333228295c6e20207d5c6e7d222c7b2264657073223a7b22486578223a7b22246a6967223a337d7d7d5d7d2c7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a317d2c2261757468222c5b5d5d7d2c7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a327d2c2261757468222c5b5d5d7d5d7d11010000000000001976a914fc15596b750b65e16c5650081b2a086da7cf85a688ac11010000000000001976a914fc15596b750b65e16c5650081b2a086da7cf85a688ac11010000000000001976a914fc15596b750b65e16c5650081b2a086da7cf85a688ac56270900000000001976a91403c5595cc7846471dc6cf3b89d340de3c8137f3a88ac00000000","jig://71fba386341b932380ec5bfedc3a40bce43d4974decdc94c419a94a8ce5dfc23_o1":{"kind":"code","props":{"deps":{"Jig":{"$jig":"native://Jig"}},"location":"_o1","nonce":1,"origin":"_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"function expect (subject) {\n  let negated = false\n\n  const stringify = x => {\n    if (typeof x !== 'object' || !x) return x\n    try { return JSON.stringify(x) } catch (e) { return x.toString() }\n  }\n\n  function check (condition, conditionString, message) {\n    if (negated ? condition : !condition) {\n      throw new Error(message || `expected value${negated ? ' not' : ''} to be ${conditionString} but was ${stringify(subject)}`)\n    }\n  }\n\n  function deepEqual (a, b) {\n    if (a === b) return true\n\n    if (typeof a !== typeof b) return false\n\n    if (typeof a !== 'object') return false\n\n    if (a === null || b === null) return false\n\n    if (Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false\n\n    if (Object.keys(a).length !== Object.keys(b).length) return false\n\n    if (!Object.keys(a).every(key => deepEqual(a[key], b[key]))) return false\n\n    if (a instanceof Set) {\n      if (a.size !== b.size) return false\n      if (!deepEqual(Array.from(a.entries()), Array.from(b.entries()))) return false\n    }\n\n    if (a instanceof Map) {\n      if (a.size !== b.size) return false\n      if (!deepEqual(Array.from(a.entries()), Array.from(b.entries()))) return false\n    }\n\n    return true\n  }\n\n  function extendsFrom (a, b) {\n    if (typeof a !== 'function') return false\n    if (typeof b !== 'function') return false\n    while (a) {\n      a = Object.getPrototypeOf(a)\n      if (a === b) return true\n    }\n    return false\n  }\n\n  return {\n    get not () { negated = !negated; return this },\n\n    toBe: (value, message) => check(subject === value, `${stringify(value)}`, message),\n    toEqual: (value, message) => check(deepEqual(subject, value), `equal to ${stringify(value)}`, message),\n    toBeInstanceOf: (Class, message) => check(subject && subject instanceof Class, `an instance of ${Class && Class.name}`, message),\n\n    toBeDefined: message => check(typeof subject !== 'undefined', 'defined', message),\n    toBeNull: message => check(subject === null, 'null', message),\n\n    toBeNumber: message => check(typeof subject === 'number', 'a number', message),\n    toBeInteger: message => check(Number.isInteger(subject), 'an integer', message),\n    toBeLessThan: (value, message) => check(subject < value && typeof subject === 'number' && typeof value === 'number', `less than ${value}`, message),\n    toBeLessThanOrEqualTo: (value, message) => check(subject <= value && typeof subject === 'number' && typeof value === 'number', `less than or equal to ${value}`, message),\n    toBeGreaterThan: (value, message) => check(subject > value && typeof subject === 'number' && typeof value === 'number', `greater than ${value}`, message),\n    toBeGreaterThanOrEqualTo: (value, message) => check(subject >= value && typeof subject === 'number' && typeof value === 'number', `greater than or equal to ${value}`, message),\n\n    toBeBoolean: message => check(typeof subject === 'boolean', 'a boolean', message),\n    toBeString: message => check(typeof subject === 'string', 'a string', message),\n    toBeObject: message => check(subject && typeof subject === 'object', 'an object', message),\n    toBeArray: message => check(Array.isArray(subject), 'an array', message),\n    toBeSet: message => check(subject instanceof Set, 'a set', message),\n    toBeMap: message => check(subject instanceof Map, 'a map', message),\n    toBeUint8Array: message => check(subject instanceof Uint8Array, 'a uint8array', message),\n\n    toBeClass: message => check(typeof subject === 'function' && subject.toString().startsWith('class'), 'a class', message),\n    toBeFunction: message => check(typeof subject === 'function' && !subject.toString().startsWith('class'), 'a function', message),\n    toBeJigClass: message => check(typeof subject === 'function' && subject.toString().startsWith('class') && extendsFrom(subject, Jig), 'a jig class', message),\n    toExtendFrom: (Class, message) => check(extendsFrom(subject, Class), `an extension of ${Class && Class.name}`, message)\n  }\n}","version":"04"},"tx://71fba386341b932380ec5bfedc3a40bce43d4974decdc94c419a94a8ce5dfc23":"","jig://d6170025a62248d8df6dc14e3806e68b8df3d804c800c7bfb23b0b4232862505_o1":{"kind":"code","props":{"deps":{"Base58":{"$jig":"81bcef29b0e4ed745f3422c0b764a33c76d0368af2d2e7dd139db8e00ee3d8a6_o1"},"Hex":{"$jig":"727e7b423b7ee40c0b5be87fba7fa5673ea2d20a74259040a7295d9c32a90011_o1"},"asm":{"$jig":"49145693676af7567ebe20671c5cb01369ac788c20f3b1c804f624a1eda18f3f_o1"},"sha256":{"$jig":"3b7ef411185bbe3d01caeadbe6f115b0103a546c4ef0ac7474aa6fbb71aff208_o1"}},"location":"_o1","nonce":1,"origin":"_o1","owner":"1Ne4Bd76Hr88R3YKYWejW164DDE7EEGjPX","satoshis":0,"scriptTemplate":"20000000000000000000000000000000000000000000000000000000000000000001c35279630142517a75547901687f7501447f77007901207f7504000000007e517951797e56797eaa577901247f75547f77876975756754795579827758947f75557982770128947f77527987696861547921cdb285cc49e5ff3eed6536e7b426e8a528b05bf9276bd05431a671743e651ceb002102dca1e194dd541a47f4c85fea6a4d45bb50f16ed2fddc391bf80b525454f8b40920f941a26b1c1802eaa09109701e4e632e1ef730b0b68c9517e7c19be2ba4c7d37202f282d163597a82d72c263b004695297aecb4d758dccd1dbf61e82a3360bde2c202cde0b36a3821ef6dbd1cc8d754dcbae97526904b063c2722da89735162d282f56795679aa616100790079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a756157795679567956795679537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff0061517951795179517997527a75517a5179009f635179517993527a75517a685179517a75517a7561527a75517a517951795296a0630079527994527a75517a68537982775279827754527993517993013051797e527e53797e57797e527e52797e5579517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7e56797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a75617777777777","scrypt":"contract OrderLock {\n  // double hash of designated output, i.e. hash256(satoshis + varint + output script)\n  Sha256 hashOutput;\n\n  // trailingPrevouts = concat all inputs (txid1 + vout1 + txid2 + vout2 + ...),\n  // excluding first 2 inputs, i.e. cancel baton input and self input\n  public function unlock(SigHashPreimage preimage, bytes trailingPrevouts, bool isCancel) {\n      // c3 = SIGHASH_SINGLE | ANYONECANPAY, checks self input, self output\n      SigHashType sigHashType = SigHashType(b'c3');\n      if (isCancel) {\n          // 42 = SIGHASH_NONE, checks all inputs, no outputs\n          sigHashType = SigHashType(b'42');\n          // token lock input txid + vout, 32 + 4 bytes\n          bytes selfOutpoint = preimage[68 : 104];\n          // cancel baton input, same locking tx as token lock input, vout must be 0\n          bytes cancelOutpoint = selfOutpoint[: 32] + b'00000000';\n          // reconstruct full prevouts, double hash, check against preimage hashPrevouts\n          require(hash256(selfOutpoint + cancelOutpoint + trailingPrevouts) == preimage[4 : 36]);\n      } else {\n          // check against preimage hashOutputs, with SIGHASH_SINGLE, only self output is hashed\n          require(preimage[len(preimage) - 40 : len(preimage) - 8] == this.hashOutput);\n      }\n      // check preimage\n      require(Tx.checkPreimageAdvanced(\n          preimage,\n          PrivKey(0xeb1c653e7471a63154d06b27f95bb028a5e826b4e73665ed3effe549cc85b2cd),\n          PubKey(b'02dca1e194dd541a47f4c85fea6a4d45bb50f16ed2fddc391bf80b525454f8b409'),\n          0x377d4cbae29bc1e717958cb6b030f71e2e634e1e700991a0ea02181c6ba241f9,\n          0x2cde0b36a3821ef6dbd1cc8d754dcbae97526904b063c2722da89735162d282f,\n          b'2cde0b36a3821ef6dbd1cc8d754dcbae97526904b063c2722da89735162d282f',\n          sigHashType\n      ));\n  }\n}","sealed":true,"upgradable":false},"src":"class OrderLock {\r\n  constructor(address, satoshis) {\r\n    if (typeof address !== \"string\" || address.length < 27) {\r\n      throw new TypeError(\"Invalid address\");\r\n    }\r\n    if (typeof satoshis !== \"number\" || !Number.isInteger(satoshis)) {\r\n      throw new Error(\"Invalid satoshis\");\r\n    }\r\n    if (satoshis > Number.MAX_SAFE_INTEGER) {\r\n      throw new Error(\"Invalid. Max: \" + Number.MAX_SAFE_INTEGER);\r\n    }\r\n    if (satoshis < 546) {\r\n      throw new Error(\"Dust\");\r\n    }\r\n    this.address = address;\r\n    this.satoshis = satoshis;\r\n  }\r\n  script() {\r\n    const output = this.serializeOutput(this.address, this.satoshis);\r\n    const hashOutput = this.sha256sha256(output);\r\n    return (\r\n      OrderLock.scriptTemplate.slice(0, 2) +\r\n      hashOutput +\r\n      OrderLock.scriptTemplate.slice(66)\r\n    );\r\n  }\r\n  serializeOutput(address, satoshis) {\r\n    const satoshisHex = this.serializeSatoshis(satoshis);\r\n    const satoshisHexBytes = Hex.stringToBytes(satoshisHex);\r\n    const outputScriptBytes = Hex.stringToBytes(this.getP2PKHScript(address));\r\n    const lengthBytes = [25];\r\n    return satoshisHexBytes.concat(lengthBytes, outputScriptBytes);\r\n  }\r\n  serializeSatoshis(satoshis) {\r\n    let numberHex = (\"0000000000000000\" + satoshis.toString(16)).slice(-16);\r\n    return numberHex\r\n      .match(/[a-fA-F0-9]{2}/g)\r\n      .reverse()\r\n      .join(\"\");\r\n  }\r\n  getP2PKHScript(address) {\r\n    const decoded = Base58.decode(address);\r\n    const hex = Hex.bytesToString(decoded);\r\n    return asm(`OP_DUP OP_HASH160 ${hex} OP_EQUALVERIFY OP_CHECKSIG`);\r\n  }\r\n  sha256sha256(output) {\r\n    return Hex.bytesToString(sha256(sha256(output)));\r\n  }\r\n  domain() {\r\n    return 0;\r\n  }\r\n}","version":"04"},"jig://81bcef29b0e4ed745f3422c0b764a33c76d0368af2d2e7dd139db8e00ee3d8a6_o1":{"kind":"code","props":{"deps":{},"location":"_o1","nonce":1,"origin":"_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"class Base58 {\n  static decode (s) {\n    // Based on https://gist.github.com/diafygi/90a3e80ca1c2793220e5/\n    if (typeof s !== 'string') throw new Error(`Cannot decode: ${s}`)\n    const A = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n    const d = [] // the array for storing the stream of decoded bytes\n    const b = [] // the result byte array that will be returned\n    let j // the iterator variable for the byte array (d)\n    let c // the carry amount variable that is used to overflow from the current byte to the next byte\n    let n // a temporary placeholder variable for the current byte\n    for (let i = 0; i < s.length; i++) {\n      j = 0 // reset the byte iterator\n      c = A.indexOf(s[i]) // set the initial carry amount equal to the current base58 digit\n      if (c < 0) throw new Error(`Invalid base58 character: ${s}\\n\\nDetails: i=${i}, c=${s[i]}`)\n      if (!(c || b.length ^ i)) b.push(0) // prepend the result array with a zero if the base58 digit is zero and non-zero characters haven't been seen yet (to ensure correct decode length)\n      while (j in d || c) { // start looping through the bytes until there are no more bytes and no carry amount\n        n = d[j] // set the placeholder for the current byte\n        n = n ? n * 58 + c : c // shift the current byte 58 units and add the carry amount (or just add the carry amount if this is a new byte)\n        c = n >> 8 // find the new carry amount (1-byte shift of current byte value)\n        d[j] = n % 256 // reset the current byte to the remainder (the carry amount will pass on the overflow)\n        j++ // iterate to the next byte\n      }\n    }\n    while (j--) { b.push(d[j]) } // since the byte array is backwards, loop through it in reverse order, and append\n    if (b.length < 5) throw new Error(`Base58 string too short: ${s}`)\n    // We assume the checksum and version are correct\n    return b.slice(1, b.length - 4)\n  }\n}","version":"04"},"tx://81bcef29b0e4ed745f3422c0b764a33c76d0368af2d2e7dd139db8e00ee3d8a6":"01000000014d7a5e63f6eeacd79b747df5c2de2ce44cc22303073873702393b89c91b80a78020000006a473044022058e14657885e725551cd55ca25e9b9daad64dfa84c015191049f3813722e987802201aa6646229927167dc3b654614cf4605ca287ccb3d6bf7f065f9d23d23a7040c412102e61c5fd8bd70f2db264c420ca565440da3b992da022960da5f17e86aab466b02ffffffff030000000000000000fd7d08006a0372756e01050d52756e20e296b82045787472614d64087b22696e223a302c22726566223a5b5d2c226f7574223a5b2231313731613465613234653839313934343139353735303765663165656439636563616164313837356538353431383466306564653537636536343332666661225d2c2264656c223a5b5d2c22637265223a5b22315079747269596f6b4b4e3347704b7738344c34767672474277557654597a437078225d2c2265786563223a5b7b226f70223a224445504c4f59222c2264617461223a5b22636c61737320426173653538207b5c6e2020737461746963206465636f646520287329207b5c6e202020202f2f204261736564206f6e2068747470733a2f2f676973742e6769746875622e636f6d2f646961667967692f39306133653830636131633237393332323065352f5c6e2020202069662028747970656f66207320213d3d2027737472696e672729207468726f77206e6577204572726f72286043616e6e6f74206465636f64653a20247b737d60295c6e20202020636f6e73742041203d202731323334353637383941424344454647484a4b4c4d4e505152535455565758595a6162636465666768696a6b6d6e6f707172737475767778797a275c6e20202020636f6e73742064203d205b5d202f2f2074686520617272617920666f722073746f72696e67207468652073747265616d206f66206465636f6465642062797465735c6e20202020636f6e73742062203d205b5d202f2f2074686520726573756c74206279746520617272617920746861742077696c6c2062652072657475726e65645c6e202020206c6574206a202f2f20746865206974657261746f72207661726961626c6520666f72207468652062797465206172726179202864295c6e202020206c65742063202f2f2074686520636172727920616d6f756e74207661726961626c652074686174206973207573656420746f206f766572666c6f772066726f6d207468652063757272656e74206279746520746f20746865206e65787420627974655c6e202020206c6574206e202f2f20612074656d706f7261727920706c616365686f6c646572207661726961626c6520666f72207468652063757272656e7420627974655c6e20202020666f7220286c65742069203d20303b2069203c20732e6c656e6774683b20692b2b29207b5c6e2020202020206a203d2030202f2f207265736574207468652062797465206974657261746f725c6e20202020202063203d20412e696e6465784f6628735b695d29202f2f207365742074686520696e697469616c20636172727920616d6f756e7420657175616c20746f207468652063757272656e74206261736535382064696769745c6e2020202020206966202863203c203029207468726f77206e6577204572726f722860496e76616c696420626173653538206368617261637465723a20247b737d5c5c6e5c5c6e44657461696c733a20693d247b697d2c20633d247b735b695d7d60295c6e20202020202069662028212863207c7c20622e6c656e677468205e2069292920622e70757368283029202f2f2070726570656e642074686520726573756c7420617272617920776974682061207a65726f2069662074686520626173653538206469676974206973207a65726f20616e64206e6f6e2d7a65726f206368617261637465727320686176656e2774206265656e207365656e207965742028746f20656e7375726520636f7272656374206465636f6465206c656e677468295c6e2020202020207768696c6520286a20696e2064207c7c206329207b202f2f207374617274206c6f6f70696e67207468726f7567682074686520627974657320756e74696c20746865726520617265206e6f206d6f726520627974657320616e64206e6f20636172727920616d6f756e745c6e20202020202020206e203d20645b6a5d202f2f207365742074686520706c616365686f6c64657220666f72207468652063757272656e7420627974655c6e20202020202020206e203d206e203f206e202a203538202b2063203a2063202f2f207368696674207468652063757272656e74206279746520353820756e69747320616e64206164642074686520636172727920616d6f756e7420286f72206a757374206164642074686520636172727920616d6f756e7420696620746869732069732061206e65772062797465295c6e202020202020202063203d206e203e3e2038202f2f2066696e6420746865206e657720636172727920616d6f756e742028312d62797465207368696674206f662063757272656e7420627974652076616c7565295c6e2020202020202020645b6a5d203d206e202520323536202f2f207265736574207468652063757272656e74206279746520746f207468652072656d61696e646572202874686520636172727920616d6f756e742077696c6c2070617373206f6e20746865206f766572666c6f77295c6e20202020202020206a2b2b202f2f206974657261746520746f20746865206e65787420627974655c6e2020202020207d5c6e202020207d5c6e202020207768696c6520286a2d2d29207b20622e7075736828645b6a5d29207d202f2f2073696e6365207468652062797465206172726179206973206261636b77617264732c206c6f6f70207468726f75676820697420696e2072657665727365206f726465722c20616e6420617070656e645c6e2020202069662028622e6c656e677468203c203529207468726f77206e6577204572726f72286042617365353820737472696e6720746f6f2073686f72743a20247b737d60295c6e202020202f2f20576520617373756d652074686520636865636b73756d20616e642076657273696f6e2061726520636f72726563745c6e2020202072657475726e20622e736c69636528312c20622e6c656e677468202d2034295c6e20207d5c6e7d222c7b2264657073223a7b7d7d5d7d5d7d11010000000000001976a914fc15596b750b65e16c5650081b2a086da7cf85a688ac0fe70000000000001976a91403c5595cc7846471dc6cf3b89d340de3c8137f3a88ac00000000","jig://49145693676af7567ebe20671c5cb01369ac788c20f3b1c804f624a1eda18f3f_o1":{"kind":"code","props":{"OP_CODES":{"OP_0":0,"OP_0NOTEQUAL":146,"OP_1":81,"OP_10":90,"OP_11":91,"OP_12":92,"OP_13":93,"OP_14":94,"OP_15":95,"OP_16":96,"OP_1ADD":139,"OP_1NEGATE":79,"OP_1SUB":140,"OP_2":82,"OP_2DROP":109,"OP_2DUP":110,"OP_2OVER":112,"OP_2ROT":113,"OP_2SWAP":114,"OP_3":83,"OP_3DUP":111,"OP_4":84,"OP_5":85,"OP_6":86,"OP_7":87,"OP_8":88,"OP_9":89,"OP_ABS":144,"OP_ADD":147,"OP_AND":132,"OP_BIN2NUM":129,"OP_BOOLAND":154,"OP_BOOLOR":155,"OP_CAT":126,"OP_CHECKMULTISIG":174,"OP_CHECKMULTISIGVERIFY":175,"OP_CHECKSIG":172,"OP_CHECKSIGVERIFY":173,"OP_CODESEPARATOR":171,"OP_DEPTH":116,"OP_DIV":150,"OP_DROP":117,"OP_DUP":118,"OP_ELSE":103,"OP_ENDIF":104,"OP_EQUAL":135,"OP_EQUALVERIFY":136,"OP_FALSE":0,"OP_FROMALTSTACK":108,"OP_GREATERTHAN":160,"OP_GREATERTHANOREQUAL":162,"OP_HASH160":169,"OP_HASH256":170,"OP_IF":99,"OP_IFDUP":115,"OP_INVALIDOPCODE":255,"OP_INVERT":131,"OP_LESSTHAN":159,"OP_LESSTHANOREQUAL":161,"OP_LSHIFT":152,"OP_MAX":164,"OP_MIN":163,"OP_MOD":151,"OP_MUL":149,"OP_NEGATE":143,"OP_NIP":119,"OP_NOP":97,"OP_NOP1":176,"OP_NOP10":185,"OP_NOP2":177,"OP_NOP3":178,"OP_NOP4":179,"OP_NOP5":180,"OP_NOP6":181,"OP_NOP7":182,"OP_NOP8":183,"OP_NOP9":184,"OP_NOT":145,"OP_NOTIF":100,"OP_NUM2BIN":128,"OP_NUMEQUAL":156,"OP_NUMEQUALVERIFY":157,"OP_NUMNOTEQUAL":158,"OP_OR":133,"OP_OVER":120,"OP_PICK":121,"OP_PUBKEY":254,"OP_PUBKEYHASH":253,"OP_PUSHDATA1":76,"OP_PUSHDATA2":77,"OP_PUSHDATA4":78,"OP_RETURN":106,"OP_RIPEMD160":166,"OP_ROLL":122,"OP_ROT":123,"OP_RSHIFT":153,"OP_SHA1":167,"OP_SHA256":168,"OP_SIZE":130,"OP_SPLIT":127,"OP_SUB":148,"OP_SWAP":124,"OP_TOALTSTACK":107,"OP_TRUE":81,"OP_TUCK":125,"OP_VERIFY":105,"OP_WITHIN":165,"OP_XOR":134},"deps":{"Hex":{"$jig":"727e7b423b7ee40c0b5be87fba7fa5673ea2d20a74259040a7295d9c32a90011_o1"}},"location":"_o1","nonce":2,"origin":"61e1265acb3d93f1bf24a593d70b2a6b1c650ec1df90ddece8d6954ae3cdd915_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"function asm (s) {\n  const parts = s.split(' ')\n  let out = []\n\n  for (const part of parts) {\n    // If one of our predefined op-codes\n    if (typeof asm.OP_CODES[part] !== 'undefined') {\n      out.push(asm.OP_CODES[part])\n      continue\n    }\n\n    // Hex data\n    const bytes = Hex.stringToBytes(part.length === 1 ? '0' + part : part)\n\n    // OP_0\n    if (bytes.length === 1 && bytes[0] === 0) {\n      out.push(bytes[0]) // OP_0\n      continue\n    }\n\n    // OP_1-OP_16\n    if (bytes.length === 1 && bytes[0] >= 1 && bytes[0] <= 16) {\n      out.push(bytes[0] + 0x50)\n      continue\n    }\n\n    // OP_PUSH+[1-75] <bytes>\n    if (bytes.length <= 75) {\n      out = out.concat(bytes.length).concat(bytes)\n      continue\n    }\n\n    // OP_PUSHDATA1 <len> <bytes>\n    if (bytes.length < 256) {\n      out = out.concat(asm.OP_CODES.OP_PUSHDATA1).concat([bytes.length]).concat(bytes)\n      continue\n    }\n\n    const floor = x => parseInt(x.toString(), 10)\n\n    // OP_PUSHDATA2 <len> <bytes>\n    if (bytes.length < 256 * 256) {\n      const len = [floor(bytes.length / 256), bytes.length % 256]\n      out = out.concat(asm.OP_CODES.OP_PUSHDATA2).concat(len).concat(bytes)\n      continue\n    }\n\n    // OP_PUSHDATA4 <len> <bytes>\n    const len = [\n      floor(bytes.length / 256 / 256 / 256),\n      floor(bytes.length / 256 / 256) % 256,\n      floor(bytes.length / 256) % 256,\n      bytes.length % 256\n    ]\n    out = out.concat(asm.OP_CODES.OP_PUSHDATA4).concat(len).concat(bytes)\n    continue\n  }\n\n  return Hex.bytesToString(out)\n}","version":"04"},"tx://49145693676af7567ebe20671c5cb01369ac788c20f3b1c804f624a1eda18f3f":"010000000215d9cde34a95d6e8ecdd90dfc10e651c6b2a0bd793a524bff1933dcb5a26e161010000006a47304402205f12662c13ba40975732a68eb2aec3eccd63b56eb64ef53a92181d6a7e5d9cc4022058def5e1c2071dc3e173e693ac769d1d049a3b8a52a67cc3509cea85adf3f69a4121035ac05f27725ccd234eee649a2e4023284c654bab28b653f5d88520ff05c349ebffffffff15d9cde34a95d6e8ecdd90dfc10e651c6b2a0bd793a524bff1933dcb5a26e161020000006b483045022100bd9aa7ad48b5a0a618e42de966c92125e6a9be23cde004c03bc9947f75a37b4802200e91c33fa5ceb32c52e392bc723f1b5272102783ccb5445409f4bb6efe348206412102e61c5fd8bd70f2db264c420ca565440da3b992da022960da5f17e86aab466b02ffffffff030000000000000000fdb10d006a0372756e01050d52756e20e296b82045787472614d980d7b22696e223a312c22726566223a5b22373237653762343233623765653430633062356265383766626137666135363733656132643230613734323539303430613732393564396333326139303031315f6f31225d2c226f7574223a5b2265656239623262653932383363643362623936666530613038613634633163396566393234663639633830373134306637313338313934343266613130356535225d2c2264656c223a5b5d2c22637265223a5b5d2c2265786563223a5b7b226f70223a2255504752414445222c2264617461223a5b7b22246a6967223a307d2c2266756e6374696f6e2061736d20287329207b5c6e2020636f6e7374207061727473203d20732e73706c697428272027295c6e20206c6574206f7574203d205b5d5c6e5c6e2020666f722028636f6e73742070617274206f6620706172747329207b5c6e202020202f2f204966206f6e65206f66206f757220707265646566696e6564206f702d636f6465735c6e2020202069662028747970656f662061736d2e4f505f434f4445535b706172745d20213d3d2027756e646566696e65642729207b5c6e2020202020206f75742e707573682861736d2e4f505f434f4445535b706172745d295c6e202020202020636f6e74696e75655c6e202020207d5c6e5c6e202020202f2f2048657820646174615c6e20202020636f6e7374206279746573203d204865782e737472696e67546f427974657328706172742e6c656e677468203d3d3d2031203f20273027202b2070617274203a2070617274295c6e5c6e202020202f2f204f505f305c6e202020206966202862797465732e6c656e677468203d3d3d20312026262062797465735b305d203d3d3d203029207b5c6e2020202020206f75742e707573682862797465735b305d29202f2f204f505f305c6e202020202020636f6e74696e75655c6e202020207d5c6e5c6e202020202f2f204f505f312d4f505f31365c6e202020206966202862797465732e6c656e677468203d3d3d20312026262062797465735b305d203e3d20312026262062797465735b305d203c3d20313629207b5c6e2020202020206f75742e707573682862797465735b305d202b2030783530295c6e202020202020636f6e74696e75655c6e202020207d5c6e5c6e202020202f2f204f505f505553482b5b312d37355d203c62797465733e5c6e202020206966202862797465732e6c656e677468203c3d20373529207b5c6e2020202020206f7574203d206f75742e636f6e6361742862797465732e6c656e677468292e636f6e636174286279746573295c6e202020202020636f6e74696e75655c6e202020207d5c6e5c6e202020202f2f204f505f505553484441544131203c6c656e3e203c62797465733e5c6e202020206966202862797465732e6c656e677468203c2032353629207b5c6e2020202020206f7574203d206f75742e636f6e6361742861736d2e4f505f434f4445532e4f505f505553484441544131292e636f6e636174285b62797465732e6c656e6774685d292e636f6e636174286279746573295c6e202020202020636f6e74696e75655c6e202020207d5c6e5c6e20202020636f6e737420666c6f6f72203d2078203d3e207061727365496e7428782e746f537472696e6728292c203130295c6e5c6e202020202f2f204f505f505553484441544132203c6c656e3e203c62797465733e5c6e202020206966202862797465732e6c656e677468203c20323536202a2032353629207b5c6e202020202020636f6e7374206c656e203d205b666c6f6f722862797465732e6c656e677468202f20323536292c2062797465732e6c656e6774682025203235365d5c6e2020202020206f7574203d206f75742e636f6e6361742861736d2e4f505f434f4445532e4f505f505553484441544132292e636f6e636174286c656e292e636f6e636174286279746573295c6e202020202020636f6e74696e75655c6e202020207d5c6e5c6e202020202f2f204f505f505553484441544134203c6c656e3e203c62797465733e5c6e20202020636f6e7374206c656e203d205b5c6e202020202020666c6f6f722862797465732e6c656e677468202f20323536202f20323536202f20323536292c5c6e202020202020666c6f6f722862797465732e6c656e677468202f20323536202f20323536292025203235362c5c6e202020202020666c6f6f722862797465732e6c656e677468202f20323536292025203235362c5c6e20202020202062797465732e6c656e6774682025203235365c6e202020205d5c6e202020206f7574203d206f75742e636f6e6361742861736d2e4f505f434f4445532e4f505f505553484441544134292e636f6e636174286c656e292e636f6e636174286279746573295c6e20202020636f6e74696e75655c6e20207d5c6e5c6e202072657475726e204865782e6279746573546f537472696e67286f7574295c6e7d222c7b224f505f434f444553223a7b224f505f30223a302c224f505f304e4f54455155414c223a3134362c224f505f31223a38312c224f505f3130223a39302c224f505f3131223a39312c224f505f3132223a39322c224f505f3133223a39332c224f505f3134223a39342c224f505f3135223a39352c224f505f3136223a39362c224f505f31414444223a3133392c224f505f314e4547415445223a37392c224f505f31535542223a3134302c224f505f32223a38322c224f505f3244524f50223a3130392c224f505f32445550223a3131302c224f505f324f564552223a3131322c224f505f32524f54223a3131332c224f505f3253574150223a3131342c224f505f33223a38332c224f505f33445550223a3131312c224f505f34223a38342c224f505f35223a38352c224f505f36223a38362c224f505f37223a38372c224f505f38223a38382c224f505f39223a38392c224f505f414253223a3134342c224f505f414444223a3134372c224f505f414e44223a3133322c224f505f42494e324e554d223a3132392c224f505f424f4f4c414e44223a3135342c224f505f424f4f4c4f52223a3135352c224f505f434154223a3132362c224f505f434845434b4d554c5449534947223a3137342c224f505f434845434b4d554c5449534947564552494659223a3137352c224f505f434845434b534947223a3137322c224f505f434845434b534947564552494659223a3137332c224f505f434f4445534550415241544f52223a3137312c224f505f4445505448223a3131362c224f505f444956223a3135302c224f505f44524f50223a3131372c224f505f445550223a3131382c224f505f454c5345223a3130332c224f505f454e444946223a3130342c224f505f455155414c223a3133352c224f505f455155414c564552494659223a3133362c224f505f46414c5345223a302c224f505f46524f4d414c54535441434b223a3130382c224f505f475245415445525448414e223a3136302c224f505f475245415445525448414e4f52455155414c223a3136322c224f505f48415348313630223a3136392c224f505f48415348323536223a3137302c224f505f4946223a39392c224f505f4946445550223a3131352c224f505f494e56414c49444f50434f4445223a3235352c224f505f494e56455254223a3133312c224f505f4c4553535448414e223a3135392c224f505f4c4553535448414e4f52455155414c223a3136312c224f505f4c5348494654223a3135322c224f505f4d4158223a3136342c224f505f4d494e223a3136332c224f505f4d4f44223a3135312c224f505f4d554c223a3134392c224f505f4e4547415445223a3134332c224f505f4e4950223a3131392c224f505f4e4f50223a39372c224f505f4e4f5031223a3137362c224f505f4e4f503130223a3138352c224f505f4e4f5032223a3137372c224f505f4e4f5033223a3137382c224f505f4e4f5034223a3137392c224f505f4e4f5035223a3138302c224f505f4e4f5036223a3138312c224f505f4e4f5037223a3138322c224f505f4e4f5038223a3138332c224f505f4e4f5039223a3138342c224f505f4e4f54223a3134352c224f505f4e4f544946223a3130302c224f505f4e554d3242494e223a3132382c224f505f4e554d455155414c223a3135362c224f505f4e554d455155414c564552494659223a3135372c224f505f4e554d4e4f54455155414c223a3135382c224f505f4f52223a3133332c224f505f4f564552223a3132302c224f505f5049434b223a3132312c224f505f5055424b4559223a3235342c224f505f5055424b455948415348223a3235332c224f505f505553484441544131223a37362c224f505f505553484441544132223a37372c224f505f505553484441544134223a37382c224f505f52455455524e223a3130362c224f505f524950454d44313630223a3136362c224f505f524f4c4c223a3132322c224f505f524f54223a3132332c224f505f525348494654223a3135332c224f505f53484131223a3136372c224f505f534841323536223a3136382c224f505f53495a45223a3133302c224f505f53504c4954223a3132372c224f505f535542223a3134382c224f505f53574150223a3132342c224f505f544f414c54535441434b223a3130372c224f505f54525545223a38312c224f505f5455434b223a3132352c224f505f564552494659223a3130352c224f505f57495448494e223a3136352c224f505f584f52223a3133347d2c2264657073223a7b22486578223a7b22246a6967223a317d7d7d5d7d5d7d11010000000000001976a914fc15596b750b65e16c5650081b2a086da7cf85a688ac2cdb0000000000001976a91403c5595cc7846471dc6cf3b89d340de3c8137f3a88ac00000000","jig://3b7ef411185bbe3d01caeadbe6f115b0103a546c4ef0ac7474aa6fbb71aff208_o1":{"kind":"code","props":{"deps":{},"location":"_o1","nonce":1,"origin":"_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"function sha256 (message) {\n  if (!Array.isArray(message)) throw new Error(`Invalid bytes: ${message}`)\n\n  // Based off https://github.com/emn178/js-sha256/blob/master/src/sha256.js\n\n  const EXTRA = [-2147483648, 8388608, 32768, 128]\n  const SHIFT = [24, 16, 8, 0]\n  const K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ]\n\n  const blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n  let h0 = 0x6a09e667\n  let h1 = 0xbb67ae85\n  let h2 = 0x3c6ef372\n  let h3 = 0xa54ff53a\n  let h4 = 0x510e527f\n  let h5 = 0x9b05688c\n  let h6 = 0x1f83d9ab\n  let h7 = 0x5be0cd19\n\n  let block = 0\n  let start = 0\n  let bytes = 0\n  let hBytes = 0\n  let first = true\n  let hashed = false\n  let lastByteIndex = 0\n\n  update()\n  finalize()\n  return digest()\n\n  function update () {\n    let i\n    let index = 0\n    const length = message.length\n\n    while (index < length) {\n      if (hashed) {\n        hashed = false\n        blocks[0] = block\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n                blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n                blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n                blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0\n      }\n\n      for (i = start; index < length && i < 64; ++index) {\n        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3]\n      }\n\n      lastByteIndex = i\n      bytes += i - start\n      if (i >= 64) {\n        block = blocks[16]\n        start = i - 64\n        hash()\n        hashed = true\n      } else {\n        start = i\n      }\n    }\n\n    if (bytes > 4294967295) {\n      hBytes += bytes / 4294967296 << 0\n      bytes = bytes % 4294967296\n    }\n  }\n\n  function finalize () {\n    blocks[16] = block\n    blocks[lastByteIndex >> 2] |= EXTRA[lastByteIndex & 3]\n    block = blocks[16]\n    if (lastByteIndex >= 56) {\n      if (!hashed) {\n        hash()\n      }\n      blocks[0] = block\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n            blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n            blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n            blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0\n    }\n    blocks[14] = hBytes << 3 | bytes >>> 29\n    blocks[15] = bytes << 3\n    hash()\n  }\n\n  function hash () {\n    let a = h0\n    let b = h1\n    let c = h2\n    let d = h3\n    let e = h4\n    let f = h5\n    let g = h6\n    let h = h7\n    let j\n    let s0\n    let s1\n    let maj\n    let t1\n    let t2\n    let ch\n    let ab\n    let da\n    let cd\n    let bc\n\n    for (j = 16; j < 64; ++j) {\n      t1 = blocks[j - 15]\n      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3)\n      t1 = blocks[j - 2]\n      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10)\n      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0\n    }\n\n    bc = b & c\n    for (j = 0; j < 64; j += 4) {\n      if (first) {\n        ab = 704751109\n        t1 = blocks[0] - 210244248\n        h = t1 - 1521486534 << 0\n        d = t1 + 143694565 << 0\n        first = false\n      } else {\n        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10))\n        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7))\n        ab = a & b\n        maj = ab ^ (a & c) ^ bc\n        ch = (e & f) ^ (~e & g)\n        t1 = h + s1 + ch + K[j] + blocks[j]\n        t2 = s0 + maj\n        h = d + t1 << 0\n        d = t1 + t2 << 0\n      }\n      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10))\n      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7))\n      da = d & a\n      maj = da ^ (d & b) ^ ab\n      ch = (h & e) ^ (~h & f)\n      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1]\n      t2 = s0 + maj\n      g = c + t1 << 0\n      c = t1 + t2 << 0\n      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10))\n      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7))\n      cd = c & d\n      maj = cd ^ (c & a) ^ da\n      ch = (g & h) ^ (~g & e)\n      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2]\n      t2 = s0 + maj\n      f = b + t1 << 0\n      b = t1 + t2 << 0\n      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10))\n      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7))\n      bc = b & c\n      maj = bc ^ (b & d) ^ cd\n      ch = (f & g) ^ (~f & h)\n      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3]\n      t2 = s0 + maj\n      e = a + t1 << 0\n      a = t1 + t2 << 0\n    }\n\n    h0 = h0 + a << 0\n    h1 = h1 + b << 0\n    h2 = h2 + c << 0\n    h3 = h3 + d << 0\n    h4 = h4 + e << 0\n    h5 = h5 + f << 0\n    h6 = h6 + g << 0\n    h7 = h7 + h << 0\n  }\n\n  function digest () {\n    return [\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\n      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\n      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF,\n      (h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF\n    ]\n  }\n}","version":"04"},"tx://3b7ef411185bbe3d01caeadbe6f115b0103a546c4ef0ac7474aa6fbb71aff208":"","tx://d6170025a62248d8df6dc14e3806e68b8df3d804c800c7bfb23b0b4232862505":"","tx://15381533a03454b9940064ae465010e4ac5dcc7c1539f712c0a55225e3e5fd49":""}